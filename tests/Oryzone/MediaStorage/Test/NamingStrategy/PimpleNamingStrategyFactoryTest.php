<?php
namespace Oryzone\MediaStorage\Test\NamingStrategy;

use Oryzone\MediaStorage\NamingStrategy\PimpleNamingStrategyFactory;
use Pimple;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-07 at 06:36:02.
 */
class PimpleNamingStrategyFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PimpleNamingStrategyFactory
     */
    protected $factory;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $container = new Pimple();
        $this->factory = new PimpleNamingStrategyFactory($container);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testAddDefinitionAndGet()
    {
        $namingStrategy = $this->getMock('\Oryzone\MediaStorage\NamingStrategy\NamingStrategyInterface');
        $this->factory->addDefinition('default', function($c) use ($namingStrategy){
           return $namingStrategy;
        });
        $this->assertSame($namingStrategy, $this->factory->get('default'));
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testGetException0()
    {
        //tries to get an undefined naming strategy
        $this->factory->get('unknown');
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidConfigurationException
     */
    public function testGetException1()
    {
        //uses a definition that does not return a NamingStrategyInterface object
        $this->factory->addDefinition('invalid', function($c){
            return 'foo';
        });

        $this->factory->get('invalid');
    }
}
