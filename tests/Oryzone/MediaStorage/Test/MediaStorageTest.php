<?php
namespace Oryzone\MediaStorage\Test;

/*
 * This file is part of the Oryzone/MediaStorage package.
 *
 * (c) Luciano Mammino <lmammino@oryzone.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Oryzone\MediaStorage\MediaStorage;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-08 at 14:36:14.
 */
class MediaStorageTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var MediaStorage
     */
    protected $ms;

    /**
     * @var MediaStorage
     */
    protected $noDefaultsMs;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $eventDispatcherAdapter;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $persistenceAdapter;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $cdnFactory;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $contextFactory;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $filesystemFactory;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $providerFactory;

    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $namingStrategyFactory;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->eventDispatcherAdapter = $this->getMock('\Oryzone\MediaStorage\Event\EventDispatcherAdapterInterface');
        $this->persistenceAdapter     = $this->getMock('\Oryzone\MediaStorage\Persistence\PersistenceAdapterInterface');
        $this->cdnFactory             = $this->getMock('\Oryzone\MediaStorage\Cdn\CdnFactoryInterface');
        $this->contextFactory         = $this->getMock('\Oryzone\MediaStorage\Context\ContextFactoryInterface');
        $this->filesystemFactory      = $this->getMock('\Oryzone\MediaStorage\Filesystem\FilesystemFactoryInterface');
        $this->providerFactory        = $this->getMock('\Oryzone\MediaStorage\Provider\ProviderFactoryInterface');
        $this->namingStrategyFactory  = $this->getMock('\Oryzone\MediaStorage\NamingStrategy\NamingStrategyFactoryInterface');
        $this->ms = new MediaStorage(
            $this->eventDispatcherAdapter,
            $this->persistenceAdapter,
            $this->cdnFactory,
            $this->contextFactory,
            $this->filesystemFactory,
            $this->providerFactory,
            $this->namingStrategyFactory,
            'defaultCdn',
            'defaultContext',
            'defaultFilesystem',
            'defaultProvider',
            'defaultNamingStrategy',
            'defaultVariant'
        );

        $this->noDefaultsMs = new MediaStorage(
            $this->eventDispatcherAdapter,
            $this->persistenceAdapter,
            $this->cdnFactory,
            $this->contextFactory,
            $this->filesystemFactory,
            $this->providerFactory,
            $this->namingStrategyFactory
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGetCdn()
    {
        $this->cdnFactory->expects($this->once())
            ->method('get')
            ->with($this->equalTo('fooCdn'));

        $this->ms->getCdn('fooCdn');
    }

    public function testGetDefaultCdn()
    {
        $this->cdnFactory->expects($this->once())
            ->method('get')
            ->with($this->equalTo('defaultCdn'));

        $this->ms->getCdn();
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testGetCdnException()
    {
        $this->noDefaultsMs->getCdn();
    }

    public function testGetContext()
    {
        $this->contextFactory->expects($this->once())
            ->method('get')
            ->with($this->equalTo('fooContext'));

        $this->ms->getContext('fooContext');
    }

    public function testGetDefaultContext()
    {
        $this->contextFactory->expects($this->once())
            ->method('get')
            ->with($this->equalTo('defaultContext'));

        $this->ms->getContext();
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testGetContextException()
    {
        $this->noDefaultsMs->getContext();
    }

    public function testGetFilesystem()
    {
        $this->filesystemFactory->expects($this->once())
            ->method('get')
            ->with($this->equalTo('fooFilesystem'));

        $this->ms->getFilesystem('fooFilesystem');
    }

    public function testGetDefaultFilesystem()
    {
        $this->filesystemFactory->expects($this->once())
            ->method('get')
            ->with($this->equalTo('defaultFilesystem'));

        $this->ms->getFilesystem();
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testGetFilesystemException()
    {
        $this->noDefaultsMs->getFilesystem();
    }

    public function testGetProvider()
    {
        $this->providerFactory->expects($this->once())
            ->method('get')
            ->with($this->equalTo('fooProvider'));

        $this->ms->getProvider('fooProvider');
    }

    public function testGetDefaultProvider()
    {
        $this->providerFactory->expects($this->once())
            ->method('get')
            ->with($this->equalTo('defaultProvider'));

        $this->ms->getProvider();
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testGetProviderException()
    {
        $this->noDefaultsMs->getProvider();
    }

    public function testGetNamingStrategy()
    {
        $this->namingStrategyFactory->expects($this->once())
            ->method('get')
            ->with($this->equalTo('fooNamingStrategy'));

        $this->ms->getNamingStrategy('fooNamingStrategy');
    }

    public function testGetDefaultNamingStrategy()
    {
        $this->namingStrategyFactory->expects($this->once())
            ->method('get')
            ->with($this->equalTo('defaultNamingStrategy'));

        $this->ms->getNamingStrategy();
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testGetNamingStrategyException()
    {
        $this->noDefaultsMs->getNamingStrategy();
    }

    public function testStore()
    {
        $variantTree = $this->getMock('\Oryzone\MediaStorage\Variant\VariantTree');

        $context = $this->getMock('\Oryzone\MediaStorage\Context\ContextInterface');
        $context->expects($this->any())
            ->method('getName')
            ->will($this->returnValue('defaultContext'));
        $context->expects($this->any())
            ->method('buildVariantTree')
            ->will($this->returnValue($variantTree));

        $media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $this->contextFactory->expects($this->any())
              ->method('get')
              ->will($this->returnValue($context));

        $provider = $this->getMock('\Oryzone\MediaStorage\Provider\ProviderInterface');
        $provider->expects($this->any())
            ->method('validateContent')
            ->will($this->returnValue(TRUE));

        $this->providerFactory->expects($this->any())
            ->method('get')
            ->will($this->returnValue($provider));

        $eventDispatcherExpectedCalls = array(
            'onBeforeProcess',
            'onAfterProcess',
            'onBeforeStore',
            'onAfterStore',
            'onBeforeModelPersist',
            'onAfterModelPersist'
        );

        foreach ($eventDispatcherExpectedCalls as $method) {
            $this->eventDispatcherAdapter->expects($this->once())
                ->method($method)
                ->with($this->equalTo($media));
        }

        $this->persistenceAdapter->expects($this->once())
            ->method('save')
            ->with($media);

        $this->ms->store($media);
    }

    public function testUpdate()
    {
        $variantTree = $this->getMock('\Oryzone\MediaStorage\Variant\VariantTree');

        $context = $this->getMock('\Oryzone\MediaStorage\Context\ContextInterface');
        $context->expects($this->any())
            ->method('getName')
            ->will($this->returnValue('defaultContext'));
        $context->expects($this->any())
            ->method('buildVariantTree')
            ->will($this->returnValue($variantTree));

        $media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $this->contextFactory->expects($this->any())
            ->method('get')
            ->will($this->returnValue($context));

        $provider = $this->getMock('\Oryzone\MediaStorage\Provider\ProviderInterface');
        $provider->expects($this->any())
            ->method('validateContent')
            ->will($this->returnValue(TRUE));
        $provider->expects($this->any())
            ->method('hasChangedContent')
            ->will($this->returnValue(TRUE));

        $this->providerFactory->expects($this->any())
            ->method('get')
            ->will($this->returnValue($provider));

        $eventDispatcherExpectedCalls = array(
            'onBeforeProcess',
            'onAfterProcess',
            'onBeforeUpdate',
            'onAfterUpdate',
            'onBeforeModelPersist',
            'onAfterModelPersist'
        );

        foreach ($eventDispatcherExpectedCalls as $method) {
            $this->eventDispatcherAdapter->expects($this->once())
                ->method($method)
                ->with($this->equalTo($media));
        }

        $this->persistenceAdapter->expects($this->once())
            ->method('update')
            ->with($media);

        $this->ms->update($media);
    }

    public function testRemove()
    {
        $variantTree = $this->getMock('\Oryzone\MediaStorage\Variant\VariantTree');

        $context = $this->getMock('\Oryzone\MediaStorage\Context\ContextInterface');
        $context->expects($this->any())
            ->method('getName')
            ->will($this->returnValue('defaultContext'));
        $context->expects($this->any())
            ->method('buildVariantTree')
            ->will($this->returnValue($variantTree));

        $media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $media->expects($this->any())
            ->method('getVariants')
            ->will($this->returnValue(array()));

        $this->contextFactory->expects($this->any())
            ->method('get')
            ->will($this->returnValue($context));

        $provider = $this->getMock('\Oryzone\MediaStorage\Provider\ProviderInterface');
        $provider->expects($this->any())
            ->method('validateContent')
            ->will($this->returnValue(TRUE));
        $provider->expects($this->any())
            ->method('hasChangedContent')
            ->will($this->returnValue(TRUE));

        $this->providerFactory->expects($this->any())
            ->method('get')
            ->will($this->returnValue($provider));

        $eventDispatcherExpectedCalls = array(
            'onBeforeRemove',
            'onAfterRemove',
            'onBeforeModelRemove',
            'onAfterModelRemove'
        );

        foreach ($eventDispatcherExpectedCalls as $method) {
            $this->eventDispatcherAdapter->expects($this->once())
                ->method($method)
                ->with($this->equalTo($media));
        }

        $this->persistenceAdapter->expects($this->once())
            ->method('remove')
            ->with($media);

        $this->ms->remove($media);
    }

    public function testGetUrl()
    {
        $variant = 'default';
        $variantInstance = $this->getMock('\Oryzone\MediaStorage\Variant\VariantInterface');
        $options = array('foo' => 'bar');

        $media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $media->expects($this->any())
            ->method('getVariantInstance')
            ->will($this->returnValue($variantInstance));

        $context = $this->getMock('\Oryzone\MediaStorage\Context\ContextInterface');
        $this->contextFactory->expects($this->any())
            ->method('get')
            ->will($this->returnValue($context));

        $cdn = $this->getMock('\Oryzone\MediaStorage\Cdn\CdnInterface');
        $this->cdnFactory->expects($this->any())
            ->method('get')
            ->will($this->returnValue($cdn));
        $cdn->expects($this->once())
            ->method('getUrl')
            ->with($this->equalTo($media), $this->anything(), $this->equalTo($options));

        $this->ms->getUrl($media, $variant, $options);
    }

    public function testRender()
    {
        $variant = 'default';
        $variantInstance = $this->getMock('\Oryzone\MediaStorage\Variant\VariantInterface');
        $urlOptions = array('subFoo' => 'subBar');
        $options = array('foo' => 'bar', '_url' => $urlOptions);

        $media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $media->expects($this->any())
            ->method('getVariantInstance')
            ->will($this->returnValue($variantInstance));

        $context = $this->getMock('\Oryzone\MediaStorage\Context\ContextInterface');
        $this->contextFactory->expects($this->any())
            ->method('get')
            ->will($this->returnValue($context));

        $provider = $this->getMock('\Oryzone\MediaStorage\Provider\ProviderInterface');
        $this->providerFactory->expects($this->any())
            ->method('get')
            ->will($this->returnValue($provider));

        $cdn = $this->getMock('\Oryzone\MediaStorage\Cdn\CdnInterface');
        $this->cdnFactory->expects($this->any())
            ->method('get')
            ->will($this->returnValue($cdn));
        $cdn->expects($this->once())
            ->method('getUrl')
            ->with($this->equalTo($media), $this->anything(), $this->equalTo($urlOptions));

        $this->ms->render($media, $variant, $options);
    }
}
