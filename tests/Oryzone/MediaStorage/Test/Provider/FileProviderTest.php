<?php
namespace Oryzone\MediaStorage\Test\Provider;

/*
 * This file is part of the Oryzone/MediaStorage package.
 *
 * (c) Luciano Mammino <lmammino@oryzone.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use org\bovigo\vfs\vfsStream;

use Oryzone\MediaStorage\Provider\FileProvider;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-07 at 10:53:36.
 */
class FileProviderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var FileProvider
     */
    protected $provider;

    /**
     * @var \org\bovigo\vfs\vfsStreamDirectory
     */
    protected $dir;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->provider = new FileProvider();
        $this->dir = vfsStream::setup('root');
        $file = vfsStream::newFile('test');
        $file->write('some content');
        $this->dir->addChild($file);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGetName()
    {
        $this->assertEquals('file', $this->provider->getName());
    }

    public function testHasChangedContent()
    {
        $path = vfsStream::url('root/test');
        $md5File = md5_file($path);
        $fileObject = new \SplFileInfo($path);

        $media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $media->expects($this->any())
              ->method('getContent')
              ->will($this->onConsecutiveCalls(NULL, $path, $fileObject, $path, $fileObject));

        $this->assertFalse($this->provider->hasChangedContent($media));
        $this->assertTrue($this->provider->hasChangedContent($media));
        $this->assertTrue($this->provider->hasChangedContent($media));

        $media->expects($this->any())
              ->method('getMetaValue')
              ->with($this->equalTo('id'))
              ->will($this->returnValue($md5File));

        $this->assertFalse($this->provider->hasChangedContent($media));
        $this->assertFalse($this->provider->hasChangedContent($media));
    }

    public function testValidateContent()
    {
        $invalidPath = vfsStream::url('root/invalid');
        $path = vfsStream::url('root/test');
        $fileObject = new \SplFileInfo($path);

        $this->assertFalse($this->provider->validateContent(NULL));
        $this->assertFalse($this->provider->validateContent(25));
        $this->assertFalse($this->provider->validateContent($invalidPath));
        $this->assertTrue($this->provider->validateContent($path));
        $this->assertTrue($this->provider->validateContent($fileObject));
    }

    public function testPrepare()
    {
        $path = vfsStream::url('root/test');
        $md5File = md5_file($path);

        $media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $media->expects($this->once())
              ->method('setMetaValue')
              ->with($this->equalTo('id'),
                     $this->equalTo($md5File));
        $media->expects($this->any())
              ->method('getContent')
              ->will($this->returnValue($path));

        $context = $this->getMock('\Oryzone\MediaStorage\Context\ContextInterface');

        $this->provider->prepare($media, $context);
    }

    public function testProcess()
    {
        $path = vfsStream::url('root/test');
        $fileObject = new \SplFileInfo($path);
        $size = $fileObject->getSize();

        $media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $variant = $this->getMock('\Oryzone\MediaStorage\Variant\VariantInterface');
        $variant->expects($this->once())
                ->method('setMetaValue')
                ->with($this->equalTo('size'),
                       $this->equalTo($size));

        $this->provider->process($media, $variant, $fileObject);
    }

    public function testRender()
    {
        $media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $media->expects($this->any())
              ->method('getName')
              ->will($this->returnValue('foo'));

        $variant = $this->getMock('\Oryzone\MediaStorage\Variant\VariantInterface');
        $variant->expects($this->once())
                ->method('getMetaValue')
                ->with('size')
                ->will($this->returnValue(1234));

        $url = 'http://www.example.com/foo.gif';
        $options = array('attributes' => array('rel' => 'nofollow'));

        $rendered = $this->provider->render($media, $variant, $url, $options);
        $expectedXml = '<a href="http://www.example.com/foo.gif" title="foo (1234)" rel="nofollow" >foo</a>';
        $this->assertXmlStringEqualsXmlString($expectedXml, $rendered);
    }
}
