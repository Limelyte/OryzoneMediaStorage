<?php
namespace Oryzone\MediaStorage\Test\Provider;

/*
 * This file is part of the Oryzone/MediaStorage package.
 *
 * (c) Luciano Mammino <lmammino@oryzone.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use org\bovigo\vfs\vfsStream;

use Oryzone\MediaStorage\Provider\ImageProvider;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-07 at 15:32:33.
 */
class ImageProviderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ImageProvider
     */
    protected $provider;

    /**
     * @var \org\bovigo\vfs\vfsStreamDirectory
     */
    protected $dir;

    /**
     * @var \Oryzone\MediaStorage\Model\MediaInterface
     */
    protected $media;

    /**
     * @var \Oryzone\MediaStorage\Variant\VariantInterface
     */
    protected $variant;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->dir = vfsStream::setup();
        vfsStream::copyFromFileSystem(__DIR__.'/../fixtures/images', $this->dir);

        $image = $this->getMock('\Imagine\Image\ImageInterface');
        $image->expects($this->any())
              ->method('save')
              ->will($this->returnCallback(
                function($destFile){
                    $temp = vfsStream::newFile(basename($destFile));
                    $this->dir->addChild($temp);
                    return TRUE;
                }));
        $imagine = $this->getMock('\Imagine\Image\ImagineInterface');
        $imagine->expects($this->any())
                ->method('open')
                ->will($this->returnValue($image));

        $this->media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $this->media->expects($this->any())
                    ->method('getContext')
                    ->will($this->returnValue('default'));
        $this->media->expects($this->any())
                    ->method('getName')
                    ->will($this->returnValue('sample'));

        $this->variant = $this->getMock('\Oryzone\MediaStorage\Variant\VariantInterface');
        $this->variant->expects($this->any())
                      ->method('getName')
                      ->will($this->returnValue('default'));
        $this->variant->expects($this->any())
                      ->method('getOptions')
                      ->will($this->returnValue(array(
                            'width' => 50,
                            'height' => 30,
                            'resize' => 'stretch'
                      )));
        $this->variant->expects($this->any())
                      ->method('getMetaValue')
                      ->will($this->returnValueMap(array(
                           array('width', NULL, 50),
                           array('height', NULL, 30)
                      )));

        $this->provider = new ImageProvider(vfsStream::url($this->dir->getName()).'/', $imagine);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGetName()
    {
        $this->assertEquals('image', $this->provider->getName());
    }

    public function testValidateContent()
    {
        $textFile = vfsStream::newFile('foo.txt');
        $textFile->setContent('foo');
        $this->dir->addChild($textFile);

        $this->assertFalse($this->provider->validateContent(NULL));
        $this->assertFalse($this->provider->validateContent(1234));
        $this->assertFalse($this->provider->validateContent(vfsStream::url('root/foo.txt')));

        $imagePath = vfsStream::url('root/sample.jpg');
        $this->assertTrue($this->provider->validateContent($imagePath));
        $this->assertTrue($this->provider->validateContent(new \SplFileInfo($imagePath)));
    }


    public function testProcess()
    {
        $file = new \SplFileInfo(vfsStream::url('root/sample.jpg'));
        $resultFile = $this->provider->process($this->media, $this->variant, $file);
        $this->assertStringEndsWith('-temp-sample.jpg', $resultFile->getBasename());
    }

    public function testRender()
    {
        $url = 'http://www.example.com/foo.jpg';
        $options = array('attributes' => array('class' => 'thumbnail'));
        $expectedXml = '<img src="http://www.example.com/foo.jpg" title="sample" width="50" height="30" class="thumbnail" />';
        $rendered = $this->provider->render($this->media, $this->variant, $url, $options);
        $this->assertXmlStringEqualsXmlString($expectedXml, $rendered);
    }
}
