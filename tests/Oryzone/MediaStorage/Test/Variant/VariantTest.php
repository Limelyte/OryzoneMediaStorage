<?php
namespace Oryzone\MediaStorage\Test\Variant;

use Oryzone\MediaStorage\Variant\Variant;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-05 at 17:54:12.
 */
class VariantTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Variant
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Variant();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::setName
     * @covers Oryzone\MediaStorage\Variant\Variant::getName
     */
    public function testSetGetName()
    {
        $this->object->setName('foo');
        $this->assertEquals('foo', $this->object->getName());
    }

    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::setFilename
     * @covers Oryzone\MediaStorage\Variant\Variant::getFilename
     */
    public function testSetGetFilename()
    {
        $this->object->setFilename('filename');
        $this->assertEquals('filename', $this->object->getFilename());
    }



    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::setMeta
     * @covers Oryzone\MediaStorage\Variant\Variant::getMeta
     */
    public function testSetGetMeta()
    {
        $meta = array('foo' => 'bar');
        $this->object->setMeta($meta);
        $this->assertEquals($meta, $this->object->getMeta());
    }

    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::setMetaValue
     * @covers Oryzone\MediaStorage\Variant\Variant::getMetaValue
     */
    public function testSetGetMetaValue()
    {
        $this->object->setMetaValue('foo', 'bar');
        $this->assertEquals('bar', $this->object->getMetaValue('foo'));
    }

    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::setOptions
     * @covers Oryzone\MediaStorage\Variant\Variant::getOptions
     */
    public function testSetGetOptions()
    {
        $options = array("foo" => NULL, "bar" => "baz");
        $this->object->setOptions($options);
        $this->assertEquals($options, $this->object->getOptions());
    }

    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::setMode
     * @covers Oryzone\MediaStorage\Variant\Variant::getMode
     */
    public function testSetGetMode()
    {
        $this->object->setMode(Variant::MODE_INSTANT);
        $this->assertEquals(Variant::MODE_INSTANT, $this->object->getMode());
    }

    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::setStatus
     * @covers Oryzone\MediaStorage\Variant\Variant::getStatus
     */
    public function testSetGetStatus()
    {
        $this->object->setStatus(Variant::STATUS_READY);
        $this->assertEquals(Variant::STATUS_READY, $this->object->getStatus());
    }

    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::isReady
     */
    public function testIsReady()
    {
        $this->assertFalse($this->object->isReady());

        $this->object->setStatus(Variant::STATUS_ERROR);
        $this->assertFalse($this->object->isReady());

        $this->object->setStatus(Variant::STATUS_INVALIDATED);
        $this->assertFalse($this->object->isReady());

        $this->object->setStatus(Variant::STATUS_ON_DEMAND);
        $this->assertFalse($this->object->isReady());

        $this->object->setStatus(Variant::STATUS_PROCESSING);
        $this->assertFalse($this->object->isReady());

        $this->object->setStatus(Variant::STATUS_QUEUED);
        $this->assertFalse($this->object->isReady());

        $this->object->setStatus(Variant::STATUS_READY);
        $this->assertTrue($this->object->isReady());
    }

    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::hasError
     */
    public function testHasError()
    {
        $this->assertFalse($this->object->hasError());
        $this->object->setError('error');
        $this->assertTrue($this->object->hasError());
    }

    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::setError
     * @covers Oryzone\MediaStorage\Variant\Variant::getError
     */
    public function testSetGetError()
    {
        $this->object->setError('error');
        $this->assertEquals('error', $this->object->getError());
    }

    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::invalidate
     */
    public function testInvalidate()
    {
        $this->object->invalidate();
        $this->assertEquals(Variant::STATUS_INVALIDATED, $this->object->getStatus());
    }

    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::toArray
     */
    public function testToArray()
    {
        $data = array(
            'name' => 'foo',
            'filename' => 'bar',
            'options' => array('foo' => 'bar'),
            'mode' => Variant::MODE_INSTANT,
            'status' => Variant::STATUS_ERROR,
            'error' => 'test',
            'meta' => array('a' => 'b', 'c' => 'd')
        );

        foreach($data as $name => $value)
        {
            $setter = 'set'.ucwords($name);
            $this->object->$setter($value);
        }

        $this->assertEquals($data, $this->object->toArray());
    }

    /**
     * @covers Oryzone\MediaStorage\Variant\Variant::fromArray
     */
    public function testFromArray()
    {
        $data = array(
            'name' => 'foo',
            'filename' => 'bar',
            'options' => array('foo' => 'bar'),
            'mode' => Variant::MODE_INSTANT,
            'status' => Variant::STATUS_ERROR,
            'error' => 'test',
            'meta' => array('a' => 'b', 'c' => 'd')
        );
        $variant = Variant::fromArray($data);

        foreach($data as $name => $value)
        {
            $getter = 'get'.ucwords($name);
            $this->assertEquals($value, $variant->$getter());
        }
    }
}