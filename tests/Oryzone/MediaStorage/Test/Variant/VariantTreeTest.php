<?php
namespace Oryzone\MediaStorage\Test\Variant;

/*
 * This file is part of the Oryzone/MediaStorage package.
 *
 * (c) Luciano Mammino <lmammino@oryzone.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Oryzone\MediaStorage\Variant\Variant,
    Oryzone\MediaStorage\Variant\VariantNode,
    Oryzone\MediaStorage\Variant\VariantTree,
    Oryzone\MediaStorage\Exception\InvalidArgumentException;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-06 at 05:02:02.
 */
class VariantTreeTest extends \PHPUnit_Framework_TestCase
{
    protected $rootVariant;

    /**
     * @var VariantTree
     */
    protected $tree;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->rootVariant = new Variant('default');
        $this->tree = new VariantTree($this->rootVariant);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGetRoot()
    {
        $this->assertEquals($this->rootVariant, $this->tree->getRoot()->getContent());
    }

    public function testAddGetNode()
    {
        $newVariant = new Variant('new');
        $this->tree->add($newVariant, 'default');
        $this->assertEquals($newVariant, $this->tree->getNode('new')->getContent());
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testAddNodeException0()
    {
        // root already exists and tries to add a new node as root
        $this->tree->add(new Variant('newRoot'));
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testAddNodeException1()
    {
        // parent node mismatch
        $this->tree->add(new Variant('new'), 'unknown');
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testAddNodeException2()
    {
        // no name on variant
        $this->tree->add(new Variant(), 'default');
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testAddNodeException3()
    {
        // name on variant already defined
        $this->tree->add(new Variant('child'), 'default');
        $this->tree->add(new Variant('default'), 'child');
    }

    public function testVisit()
    {
        $this->tree->add(new Variant('child1'), 'default');
        $this->tree->add(new Variant('child2'), 'default');
        $this->tree->add(new Variant('child1-1'), 'child1');
        $this->tree->add(new Variant('child1-2'), 'child1');

        // name-level mapping
        $expectedVisit = array(
            'default'   => 0,
            'child1'    => 1,
            'child2'    => 1,
            'child1-1'  => 2,
            'child1-2'  => 2
        );

        $visitedNodes = array();
        $this->tree->visit(function(VariantNode $node, $level) use (&$visitedNodes) {
            $visitedNodes[$node->getContent()->getName()] = $level;
        });

        $this->assertEquals($expectedVisit, $visitedNodes);
    }

    public function testGetIterator()
    {
        $this->assertTrue( ($this->tree->getIterator() instanceof \ArrayIterator) );
    }

    public function test__toString()
    {
        $this->tree->add(new Variant('child1'), 'default');
        $this->assertTrue(is_string($this->tree->__toString()));
    }
}
