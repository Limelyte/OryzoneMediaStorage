<?php
namespace Oryzone\MediaStorage\Test\Model;

/*
 * This file is part of the Oryzone/MediaStorage package.
 *
 * (c) Luciano Mammino <lmammino@oryzone.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Oryzone\MediaStorage\Variant\VariantInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-07 at 04:28:52.
 */
class MediaTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \Oryzone\MediaStorage\Model\Media
     */
    protected $media;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->media = $this->getMockForAbstractClass('\Oryzone\MediaStorage\Model\Media', array(), 'ConcreteMedia');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testSetGetContent()
    {
        $this->media->setContent('content');
        $this->assertEquals('content', $this->media->getContent());
    }

    public function testSetGetContext()
    {
        $context = $this->getMock('\Oryzone\MediaStorage\Context\ContextInterface');
        $this->media->setContext($context);
        $this->assertSame($context, $this->media->getContext());
    }

    public function testSetGetCreatedAt()
    {
        $now = new \DateTime();
        $this->media->setCreatedAt($now);
        $this->assertSame($now, $this->media->getCreatedAt());
    }

    public function testSetGetMeta()
    {
        $meta = array('foo' => 'bar');
        $this->media->setMeta($meta);
        $this->assertEquals($meta, $this->media->getMeta());
    }

    public function testSetGetMetaValue()
    {
        $this->assertEquals('default', $this->media->getMetaValue('undefined', 'default'));
        $this->media->setMetaValue('foo', 'bar');
        $this->assertEquals('bar', $this->media->getMetaValue('foo'));
    }


    public function testSetGetModifiedAt()
    {
        $now = new \DateTime();
        $this->media->setModifiedAt($now);
        $this->assertSame($now, $this->media->getModifiedAt());
    }

    public function testSetGetName()
    {
        $this->media->setName('name');
        $this->assertEquals('name', $this->media->getName());
    }


    public function testHasAddRemoveVariant()
    {
        $this->assertFalse($this->media->hasVariant('default'));

        $variant = $this->getMock('\Oryzone\MediaStorage\Variant\VariantInterface');
        $variant->expects($this->any())
                ->method('getName')
                ->will($this->returnValue('default'));
        $this->media->addVariant($variant);

        $this->assertTrue($this->media->hasVariant('default'));

        // checks return value from removeVariant
        $this->assertTrue($this->media->removeVariant('default'));
        $this->assertFalse($this->media->removeVariant('default'));

        $this->assertFalse($this->media->hasVariant('default'));
    }


    public function testSetGetVariants()
    {
        $variants = array(
            'variant1' => array(
                'name' => 'variant1',
                'filename' => 'v1.jpg',
                'options' => array(),
                'mode' => VariantInterface::MODE_INSTANT,
                'status' => VariantInterface::STATUS_READY,
                'meta' => array('foo' => 'bar')
            ),
            'variant2' => array(
                'name' => 'variant2',
                'filename' => 'v2.jpg',
                'options' => array(),
                'mode' => VariantInterface::MODE_INSTANT,
                'status' => VariantInterface::STATUS_READY,
                'meta' => array('foo2' => 'bar2')
            ),
        );
        $this->media->setVariants($variants);
        $this->assertEquals($variants, $this->media->getVariants());
    }


    public function testGetVariantInstance()
    {
        $variants = array(
            'default' => array(
                'name' => 'default',
                'filename' => 'default.jpg',
                'options' => array(),
                'mode' => VariantInterface::MODE_INSTANT,
                'status' => VariantInterface::STATUS_READY,
                'meta' => array('foo' => 'bar')
            )
        );
        $this->media->setVariants($variants);
        $variant = $this->media->getVariantInstance('default');
        $this->assertTrue( ($variant instanceof VariantInterface) );
        $this->assertEquals('default', $variant->getName());
    }


    public function test__toString()
    {
        $this->media->setName('named');
        $this->assertTrue(is_string($this->media->__toString()));
        $this->assertContains('named', $this->media->__toString());
    }
}
