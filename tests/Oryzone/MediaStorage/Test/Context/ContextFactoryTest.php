<?php
namespace Oryzone\MediaStorage\Test\Context;

/*
 * This file is part of the Oryzone/MediaStorage package.
 *
 * (c) Luciano Mammino <lmammino@oryzone.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Oryzone\MediaStorage\Context\ContextFactory;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-06 at 09:56:49.
 */
class ContextFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ContextFactory
     */
    protected $factory;

    /**
     * @var array
     */
    protected $map;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->map = array(
            'files' => array(
                'provider'       => array('file' => array()),
                'filesystem'     => 'local',
                'cdn'            => 'local',
                'namingStrategy' => 'default',
                'variants'       => array('default' => array()),
                'defaultVariant' => 'default'
            )
        );
        $this->factory = new ContextFactory($this->map);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGet()
    {
        $m = $this->map['files'];
        $providerName = key($m['provider']);
        $context = $this->factory->get('files');
        $this->assertEquals('files', $context->getName());
        $this->assertEquals($providerName, $context->getProviderName());
        $this->assertEquals($m['provider'][$providerName], $context->getProviderOptions());
        $this->assertEquals($m['filesystem'], $context->getFilesystemName());
        $this->assertEquals($m['cdn'], $context->getCdnName());
        $this->assertEquals($m['namingStrategy'], $context->getNamingStrategyName());
        $this->assertEquals($m['variants'], $context->getVariants());
        $this->assertEquals($m['defaultVariant'], $context->getDefaultVariant());
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testGetException()
    {
        //trying to retrieve an undefined context
        $this->factory->get('foo');
    }
}
