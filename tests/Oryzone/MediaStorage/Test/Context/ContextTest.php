<?php
namespace Oryzone\MediaStorage\Test\Context;

use Oryzone\MediaStorage\Context\Context,
    Oryzone\MediaStorage\Variant\VariantTree;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-06 at 08:35:40.
 */
class ContextTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Context
     */
    protected $context;

    protected $contextName;

    protected $providerName;

    protected $providerOptions;

    protected $filesystemName;

    protected $cdnName;

    protected $namingStrategyName;

    protected $variants;

    protected $defaultVariant;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->contextName = 'default';
        $this->providerName = 'provider';
        $this->providerOptions = array();
        $this->filesystemName = 'filesystem';
        $this->cdnName = 'cdn';
        $this->namingStrategyName = 'namingStrategy';
        $this->variants = array(
            'default' => array()
        );
        $this->defaultVariant = 'default';
        $this->context = new Context(
            $this->contextName,
            $this->providerName,
            $this->providerOptions,
            $this->filesystemName,
            $this->cdnName,
            $this->namingStrategyName,
            $this->variants,
            $this->defaultVariant
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Oryzone\MediaStorage\Context\Context::getName
     */
    public function testGetName()
    {
        $this->assertEquals($this->contextName, $this->context->getName());
    }

    /**
     * @covers Oryzone\MediaStorage\Context\Context::getProviderName
     */
    public function testGetProviderName()
    {
        $this->assertEquals($this->providerName, $this->context->getProviderName());
    }

    /**
     * @covers Oryzone\MediaStorage\Context\Context::getProviderOptions
     */
    public function testGetProviderOptions()
    {
        $this->assertEquals($this->providerOptions, $this->context->getProviderOptions());
    }

    /**
     * @covers Oryzone\MediaStorage\Context\Context::getFilesystemName
     */
    public function testGetFilesystemName()
    {
        $this->assertEquals($this->filesystemName, $this->context->getFilesystemName());
    }

    /**
     * @covers Oryzone\MediaStorage\Context\Context::getCdnName
     */
    public function testGetCdnName()
    {
        $this->assertEquals($this->cdnName, $this->context->getCdnName());
    }

    /**
     * @covers Oryzone\MediaStorage\Context\Context::getNamingStrategyName
     */
    public function testGetNamingStrategyName()
    {
        $this->assertEquals($this->namingStrategyName, $this->context->getNamingStrategyName());
    }

    /**
     * @covers Oryzone\MediaStorage\Context\Context::getDefaultVariant
     */
    public function testGetDefaultVariant()
    {
        $this->assertEquals($this->defaultVariant, $this->context->getDefaultVariant());
    }

    /**
     * @covers Oryzone\MediaStorage\Context\Context::getVariants
     */
    public function testGetVariants()
    {
        $this->assertEquals($this->variants, $this->context->getVariants());
    }

    /**
     * @covers Oryzone\MediaStorage\Context\Context::hasVariant
     */
    public function testHasVariant()
    {
        $this->assertFalse($this->context->hasVariant('unknown'));
        $this->assertTrue($this->context->hasVariant('default'));
    }

    /**
     * @covers Oryzone\MediaStorage\Context\Context::buildVariantTree
     */
    public function testBuildVariantTree()
    {
        $tree = $this->context->buildVariantTree();
        $this->assertTrue( ($tree instanceof VariantTree) );
        $this->assertEquals('default', $tree->getRoot()->getContent()->getName());
    }
}
